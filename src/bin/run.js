#!/usr/bin/env node

import logger, { setupLogger } from '../../lib/logger';
import gitHubCommentManager from './github-comment-manager';
import dextrose from '../index';

const program = require('commander');
const { resolve } = require('path');
const uploadSnaps = require('../../front-end/upload_snaps');
const generateHtml = require('../../front-end/generate-front-end');


program
  .version('0.0.1')
  .command('run')
  .alias('r')
  .option('-c, --config [dextrose-config]', 'A file that exports the dextrose config for your app')
  .option('-t, --snapshotWait [snapshot-wait]', 'the amount of timeout to wait between loading a component and taking the snap', parseInt)
  .option('-T, --timeout [timeout]', 'the timeout applied to appium before it closes the app', parseInt)
  .option('-l, --loglevel [log-level]')
  .action((options) => {
    if (!options.config) {
      logger.error('run', 'Please specify the dextrose config: --config [directory/config.js]');
      process.exit(1);
    }

    const loglevel = options.loglevel ? options.loglevel : 'info';
    setupLogger(loglevel);

    const path = resolve(options.config);
    const config = require(path);
    config.snapshotWait = options.snapshotWait || 0;
    config.newCommandTimeout = options.timeout || 600000;
    dextrose(config);
  });

program
  .command('upload-snaps [path]')
  .alias('u')
  .option('-b, --bucket [bucket name]', 'the name of the s3 bucket')
  .option('-k, --key [bucket name]', 'the name of the key in the bucket')
  .option('-r, --region [aws-region]', 'the aws region of your bucket')
  .action((path, options) => {
    const { bucket, key, region } = options;

    if (!bucket) logger.error('upload-snaps', 'bucket must be defined, use -b');
    if (!key) logger.error('upload-snaps', 'key must be defined, use -k');
    if (!path) logger.error('upload-snaps', 'path must be defined');
    if (!path || !key || !bucket) process.exit(1);
    uploadSnaps(bucket, key, path, { region });
  });
program
  .command('generate-html')
  .alias('g')
  .option('-u, --upload', 'using this will attempt to upload the html file to s3')
  .option('-d, --dir [dir]', 'the directory to save the file to')
  .option('-b, --bucket [bucket name]', 'the name of the s3 bucket')
  .option('-k, --key [bucket name]', 'the name of the key in the bucket')
  .option('-r, --region [aws-region]', 'the aws region of your bucket')
  .action((options) => {
    const { bucket, key, region } = options;

    if (options.upload) {
      if (!bucket) logger.error('generate-html', 's3 bucket must be defined, use -b');
      if (!key) logger.error('generate-html', 'bucket key must be defined, use -k');
      if (!region) logger.error('generate-html', 'aws region must be defined, use -r');
      if (!key || !bucket || !region) process.exit(1);
      generateHtml(bucket, key, { region });
    } else if (!options.dir) {
      logger.error('generate-html', 'path to save to must be defined, -d');
      process.exit(1);
    }
  });

program
  .command('publish-snaps')
  .alias('ps')
  .option('-p, --path [path]', 'the path to your index.html generated by the generate-stories command')
  .option('-a, --accountName [accountName]', 'github account name, used to publish to the pull request as a comment')
  .option('-k --key [key]', 'github account key, used to publish to the pull request as a comment')
  .option('-i --issueNumber [issueNumber]', 'github issue number for the pull request you wish to post to')
  .option('-r --repository [repository]', 'gitbug organisation and repo e.g. newsuk/times-components')
  .action(async (options) => {
    const { path, accountName, key, issueNumber, repository } = options;
    
    if (!path) logger.error('publish-snaps', 'no output path from generate stories command, use -p');
    if (!accountName) logger.error('publish-snaps', 'no github account name, use -a');
    if (!key) logger.error('publish-snaps', 'no github account key, use -k');
    if (!issueNumber) logger.error('publish-snaps', 'no github issue number, use -i');
    if (!repository) logger.error('publish-snaps', 'no git organisation and repository specified');
    if (!path || !accountName || !key || !issueNumber || !repository) process.exit(1);
    await gitHubCommentManager.deleteAllVisualSnapshotComments(accountName, key, issueNumber, repository);
    await gitHubCommentManager.createNewVisualSnapshotComment(accountName, key, path, issueNumber, repository);
  });
program.parse(process.argv);
